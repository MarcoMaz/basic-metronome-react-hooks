{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["ac","engine","beatIndex","barLength","circles","oldActiveIndex","lastNote","nextNote","App","useState","isPlaying","setIsPlaying","bpm","setBpm","timeSignatureNumerator","setTimeSignatureNumerator","oneBeatInSeconds","oneBeatDurationInMs","lookAhead","active","document","getElementsByClassName","useEffect","AudioContext","resume","clearInterval","setInterval","currentTime","time","querySelector","classList","remove","osc","createOscillator","connect","destination","start","stop","frequency","value","Number","dataset","index","add","sound","suspend","id","className","Array","map","x","i","data-index","htmlFor","type","min","max","step","onChange","e","target","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45d91cc6.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { PlayFill } from 'react-bootstrap-icons';\nimport { StopFill } from 'react-bootstrap-icons';\n\nlet ac\nlet engine\nlet lastNote = 0\nlet nextNote = 0\nlet beatIndex\nlet barLength \nlet circles\nlet oldActiveIndex\n\nconst App = () => {\n  const [ isPlaying, setIsPlaying ] = useState( false )\n  const [ bpm, setBpm ] = useState( 100 )\n  const [ timeSignatureNumerator, setTimeSignatureNumerator ] = useState( 10 )\n  const oneBeatDurationInMs = (bpm) => 60000 / bpm                // 60.000 ms = 1 minute\n  const oneBeatInSeconds = oneBeatDurationInMs( bpm ) / 1000     \n  const lookAhead = oneBeatInSeconds / 2                          // Lookahead looks one beat forward in time\n  const active = '-active'\n\n  circles = document.getElementsByClassName('Circles_beat')               // Select all the circles\n\n  useEffect(() => {\n    ac = new AudioContext()\n    barLength = timeSignatureNumerator - 1\n    \n    const sound = ( ac, time ) => {\n\n      // Remove the old active class after re-render\n      oldActiveIndex = document.querySelector('.-active')\n      if ( oldActiveIndex !== null ) oldActiveIndex.classList.remove( active )\n\n      // Remove active class from previous beat\n      if ( beatIndex > 0 ){\n        circles[ beatIndex - 1 ].classList.remove( active )\n      } else {\n        circles[ barLength ].classList.remove( active )\n      }\n\n      // creates the sound, connects it and decides when it starts and stops\n      let osc = ac.createOscillator()\n      osc.connect( ac.destination )\n      osc.start( time )                             \n      osc.stop( time + 1/16 )    \n\n      // If is the first beep, plays a higher sound\n      if ( beatIndex  === 0) {\n        osc.frequency.value = '800'\n      } else {\n        osc.frequency.value = '400'\n      }\n\n      // Add active class based on index on active beat\n      if ( Number( circles[ beatIndex ].dataset.index ) === beatIndex ) {\n        circles[ beatIndex ].classList.add( active )\n      } \n\n      // If the beat reaches the end, starts over and resets the counter\n      ( beatIndex === barLength ) ? beatIndex = 0 : beatIndex += 1\n    }\n\n    const timer = () => {\n      // Calculates how long it was in ms from loading the browser to clicking the play button\n      const diff = ac.currentTime - lastNote\n\n      // Schedules the next note if the diff is larger then the setInterval\n      if ( diff >= lookAhead ) {\n        nextNote = lastNote + oneBeatInSeconds\n        lastNote = nextNote\n        sound( ac, nextNote )\n      }\n    }\n\n    if ( isPlaying ){\n      // If the metronome is playing resumes the audio context                       \n      ac.resume()           \n      clearInterval( engine )      \n      engine = setInterval( timer, oneBeatInSeconds / 25.0) \n    } else {\n      // If the metronome is stopped, resets all the values                               \n      ac.suspend()\n      clearInterval( engine )                 \n      lastNote = 0\n      nextNote = 0\n      beatIndex = 0\n    }\n\n    return () => clearInterval(engine)\n  })\n\n  // If the BPM changes, suspend the context and resets all the values\n  const handleChangeBPM = ( e ) => {\n    ac.suspend()\n    setBpm( e.target.value )\n    lastNote = 0\n    nextNote = 0  \n    beatIndex = 0\n  }\n    \n  // If the time signature changes, suspend the context and resets all the values\n  const handleTimeSignatureNumerator = ( e ) => {\n    ac.suspend()\n    setTimeSignatureNumerator( Number( e.target.value ) )\n    lastNote = 0\n    nextNote = 0\n    beatIndex = 0\n  }\n\n  // By clicking the button starts or stops the metronome\n  const toggleButton = () => ( isPlaying === true ) ? setIsPlaying( false ) : setIsPlaying( true )\n\n  return(\n    <div id=\"metronome\">\n      <div className=\"Circles\">{\n        [...Array(timeSignatureNumerator)].map((x, i) => (\n          <div key={ i } data-index={ i } className={ 'Circles_beat' + ( isPlaying ? ' Circles_beat--plays' : '' )}>\n          </div>))}\n      </div>\n      <div className=\"TimeSignature\">\n        <label className=\"TimeSignature__label\" htmlFor='TimeSignature__Input'>\n          <div className=\"TimeSignature__label__numerator\">{ timeSignatureNumerator }</div>\n          <hr className=\"TimeSignature__label__divider\" />\n          <div className=\"TimeSignature__label__denominator\">4</div>\n        </label>\n        <input className=\"TimeSignature__input\" id='TimeSignature__input' \n          type='range' min='2' max='20' step='1' \n          onChange={ handleTimeSignatureNumerator } value={ timeSignatureNumerator }/>\n      </div>\n      <div className=\"Bpm\">\n        <label className=\"Bpm_label\" htmlFor='Bpm_input'>{ bpm } BPM</label>\n        <input className=\"Bpm_input\" id='Bpm_input' \n        type='range' min='40' max='200' step='1' \n        onChange={ handleChangeBPM } value={ bpm } />\n      </div>\n      <button className=\"PlayButton\" onClick={ toggleButton }>\n        { !isPlaying ? <PlayFill /> : <StopFill /> }\n      </button>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n"],"sourceRoot":""}