{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ac","engine","beatIndex","barLength","lastNote","nextNote","App","useState","isPlaying","setIsPlaying","bpm","setBpm","timeSignatureNumerator","setTimeSignatureNumerator","oneBeatInSeconds","oneBeatDurationInMs","lookAhead","useEffect","AudioContext","resume","clearInterval","setInterval","currentTime","time","osc","createOscillator","connect","destination","start","stop","frequency","value","sound","suspend","className","htmlFor","id","type","min","max","step","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAGIA,EACAC,EAGAC,EACAC,E,sDAHAC,G,MAAW,GACXC,EAAW,EAgGAC,EA5FH,WAAO,IAAD,EACoBC,oBAAU,GAD9B,mBACRC,EADQ,KACGC,EADH,OAEQF,mBAAU,KAFlB,mBAERG,EAFQ,KAEHC,EAFG,OAG8CJ,mBAAU,GAHxD,mBAGRK,EAHQ,KAGgBC,EAHhB,KAMVC,EADsB,SAACJ,GAAD,OAAS,IAAQA,EACpBK,CAAqBL,GAAQ,IAChDM,EAAYF,EAAmB,EAErCG,qBAAU,WACRjB,EAAK,IAAIkB,aACTf,EAAYS,EAAyB,EA8CrC,OAdKJ,GAEHR,EAAGmB,SACHC,cAAcnB,GACdA,EAASoB,aAhBG,WAECrB,EAAGsB,YAAclB,GAGjBY,IAEXZ,EADAC,EAAWD,EAAWU,EAxBZ,SAAEd,EAAIuB,GAElB,IAAIC,EAAMxB,EAAGyB,mBACbD,EAAIE,QAAS1B,EAAG2B,aAChBH,EAAII,MAAOL,GACXC,EAAIK,KAAMN,EAAO,EAAE,IAIjBC,EAAIM,UAAUC,MADI,IAAf7B,EACmB,MAEA,MAIvBA,IAAcC,EAAcD,EAAY,EAAIA,GAAwB,EAWnE8B,CAAOhC,EAAIK,MAQgBS,EAAmB,MAGhDd,EAAGiC,UACHb,cAAcnB,GACdG,EAAW,EACXC,EAAW,EACXH,EAAY,GAGP,kBAAMkB,cAAcnB,OAwB7B,OACE,sBAAKiC,UAAU,MAAf,UACE,wBAAOC,QAAQ,QAAf,UAAyBvB,EAAzB,UAA6D,uBAC7D,uBAAOwB,GAAG,QAAQC,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IAAIC,SAdxB,SAAEC,GACrC1C,EAAGiC,UACHpB,EAA2B6B,EAAEC,OAAOZ,OACpC3B,EAAW,EACXC,EAAW,EACXH,EAAY,GASyF6B,MAAQnB,IAA0B,uBACrI,wBAAOuB,QAAQ,MAAf,UAAuBzB,EAAvB,UAAwC,uBACxC,uBAAO0B,GAAG,MAAMC,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMC,KAAK,IAAIC,SAzBrC,SAAEC,GACxB1C,EAAGiC,UACHtB,EAAQ+B,EAAEC,OAAOZ,OACjB3B,EAAW,EACXC,EAAW,EACXH,EAAY,GAoB6E6B,MAAQrB,IAAQ,uBACvG,wBAAQkC,QARS,kBAA+BnC,GAAT,IAAdD,IAQzB,SAAoCA,EAAqB,OAAT,aCrFvCqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e29ae188.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.scss';\n\nlet ac\nlet engine\nlet lastNote = 0\nlet nextNote = 0\nlet beatIndex\nlet barLength \n\nconst App = () => {\n  const [ isPlaying, setIsPlaying ] = useState( false )\n  const [ bpm, setBpm ] = useState( 100 )\n  const [ timeSignatureNumerator, setTimeSignatureNumerator ] = useState( 4 )\n\n  const oneBeatDurationInMs = (bpm) => 60000 / bpm                 // 60.000 ms = 1 minute\n  const oneBeatInSeconds = oneBeatDurationInMs( bpm ) / 1000     \n  const lookAhead = oneBeatInSeconds / 2                           // Lookahead looks one beat forward in time\n\n  useEffect(() => {\n    ac = new AudioContext()\n    barLength = timeSignatureNumerator - 1\n    \n    const sound = ( ac, time ) => {\n      // creates the sound, connects it and decides when it starts and stops\n      let osc = ac.createOscillator()\n      osc.connect( ac.destination )\n      osc.start( time )                             \n      osc.stop( time + 1/16 )    \n\n      // If is the first beep, plays a higher sound\n      if ( beatIndex  === 0) {\n        osc.frequency.value = '800'\n      } else {\n        osc.frequency.value = '400'\n      }\n\n      // If the beat reaches the end, starts over and resets the counter\n      (beatIndex === barLength ) ? beatIndex = 0 : beatIndex = beatIndex + 1      \n    }\n\n    const timer = () => {\n      // calculates how long it was in ms from loading the browser to clicking the play button\n      const diff = ac.currentTime - lastNote\n\n      // schedules the next note if the diff is larger then the setInterval\n      if ( diff >= lookAhead ) {\n        nextNote = lastNote + oneBeatInSeconds\n        lastNote = nextNote\n        sound( ac, nextNote)\n      }\n    }\n\n    if ( isPlaying ){\n      // if the metronome is playing resumes the audio context                       \n      ac.resume()           \n      clearInterval(engine)      \n      engine = setInterval( timer, oneBeatInSeconds / 25.0) \n    } else {\n      // if the metronome is stopped, resets all the values                               \n      ac.suspend()\n      clearInterval(engine)                 \n      lastNote = 0\n      nextNote = 0\n      beatIndex = 0\n    }\n\n    return () => clearInterval(engine)\n  })\n\n  // if the BPM changes, suspend the context and resets all the values\n  const handleChangeBPM = ( e ) => {\n    ac.suspend()\n    setBpm( e.target.value )\n    lastNote = 0\n    nextNote = 0\n    beatIndex = 0\n    }\n    \n  // if the time signature changes, suspend the context and resets all the values\n  const handleTimeSignatureNumerator = ( e ) => {\n    ac.suspend()\n    setTimeSignatureNumerator( e.target.value )\n    lastNote = 0\n    nextNote = 0\n    beatIndex = 0\n  }\n\n  // By clicking the button starts or stops the metronome\n  const toggleButton = () => ( isPlaying === true ) ? setIsPlaying(false) : setIsPlaying(true)\n\n  return(\n    <div className=\"App\">\n      <label htmlFor='beats'>{ timeSignatureNumerator } / 4</label><br/>\n      <input id='beats' type='range' min='2' max='20' step='1' onChange={ handleTimeSignatureNumerator } value={ timeSignatureNumerator }/><hr/>\n      <label htmlFor='bpm'>{ bpm } BPM</label><br/>\n      <input id='bpm' type='range' min='40' max='200' step='1' onChange={ handleChangeBPM }  value={ bpm } /><hr/>\n      <button onClick={ toggleButton }>{ !isPlaying ? 'Play' : 'Stop'}</button>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}