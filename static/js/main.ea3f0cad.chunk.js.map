{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ac","engine","beatIndex","barLength","circles","oldActiveIndex","lastNote","nextNote","App","useState","isPlaying","setIsPlaying","bpm","setBpm","timeSignatureNumerator","setTimeSignatureNumerator","oneBeatInSeconds","oneBeatDurationInMs","lookAhead","active","document","getElementsByClassName","useEffect","AudioContext","resume","clearInterval","setInterval","currentTime","time","querySelector","classList","remove","osc","createOscillator","connect","destination","start","stop","frequency","value","Number","dataset","index","add","sound","suspend","id","className","Array","map","x","i","data-index","htmlFor","type","min","max","step","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ea3f0cad.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { PlayFill } from 'react-bootstrap-icons';\nimport { StopFill } from 'react-bootstrap-icons';\n\nlet ac\nlet engine\nlet lastNote = 0\nlet nextNote = 0\nlet beatIndex\nlet barLength \nlet circles\nlet oldActiveIndex\n\nconst App = () => {\n  const [ isPlaying, setIsPlaying ] = useState( false )\n  const [ bpm, setBpm ] = useState( 100 )\n  const [ timeSignatureNumerator, setTimeSignatureNumerator ] = useState( 4 )\n  const oneBeatDurationInMs = (bpm) => 60000 / bpm                // 60.000 ms = 1 minute\n  const oneBeatInSeconds = oneBeatDurationInMs( bpm ) / 1000     \n  const lookAhead = oneBeatInSeconds / 2                          // Lookahead looks one beat forward in time\n  const active = '-active'\n\n  circles = document.getElementsByClassName('Circles_beat')               // Select all the circles\n\n  useEffect(() => {\n    ac = new AudioContext()\n    barLength = timeSignatureNumerator - 1\n    \n    const sound = ( ac, time ) => {\n\n      // Remove the old active class after re-render\n      oldActiveIndex = document.querySelector('.-active')\n      if ( oldActiveIndex !== null ) oldActiveIndex.classList.remove( active )\n\n      // Remove active class from previous beat\n      if ( beatIndex > 0 ){\n        circles[ beatIndex - 1 ].classList.remove( active )\n      } else {\n        circles[ barLength ].classList.remove( active )\n      }\n\n      // creates the sound, connects it and decides when it starts and stops\n      let osc = ac.createOscillator()\n      osc.connect( ac.destination )\n      osc.start( time )                             \n      osc.stop( time + 1/16 )    \n\n      // If is the first beep, plays a higher sound\n      if ( beatIndex  === 0) {\n        osc.frequency.value = '800'\n      } else {\n        osc.frequency.value = '400'\n      }\n\n      // Add active class based on index on active beat\n      if ( Number( circles[ beatIndex ].dataset.index ) === beatIndex ) {\n        circles[ beatIndex ].classList.add( active )\n      } \n\n      // If the beat reaches the end, starts over and resets the counter\n      ( beatIndex === barLength ) ? beatIndex = 0 : beatIndex += 1\n    }\n\n    const timer = () => {\n      // Calculates how long it was in ms from loading the browser to clicking the play button\n      const diff = ac.currentTime - lastNote\n\n      // Schedules the next note if the diff is larger then the setInterval\n      if ( diff >= lookAhead ) {\n        nextNote = lastNote + oneBeatInSeconds\n        lastNote = nextNote\n        sound( ac, nextNote )\n      }\n    }\n\n    if ( isPlaying ){\n      // If the metronome is playing resumes the audio context                       \n      ac.resume()           \n      clearInterval( engine )      \n      engine = setInterval( timer, oneBeatInSeconds / 25.0) \n    } else {\n      // If the metronome is stopped, resets all the values                               \n      ac.suspend()\n      clearInterval( engine )                 \n      lastNote = 0\n      nextNote = 0\n      beatIndex = 0\n    }\n\n    return () => clearInterval(engine)\n  })\n\n  // If the BPM changes, suspend the context and resets all the values\n  const handleChangeBPM = ( e ) => {\n    ac.suspend()\n    setBpm( e.target.value )\n    lastNote = 0\n    nextNote = 0  \n    beatIndex = 0\n  }\n    \n  // If the time signature changes, suspend the context and resets all the values\n  const handleTimeSignatureNumerator = ( e ) => {\n    ac.suspend()\n    setTimeSignatureNumerator( Number( e.target.value ) )\n    lastNote = 0\n    nextNote = 0\n    beatIndex = 0\n  }\n\n  // By clicking the button starts or stops the metronome\n  const toggleButton = () => ( isPlaying === true ) ? setIsPlaying( false ) : setIsPlaying( true )\n\n  return(\n    <div id=\"metronome\">\n      <div className=\"Circles\">{\n        [...Array(timeSignatureNumerator)].map((x, i) => (\n          <div key={ i } data-index={ i } className={ 'Circles_beat' + ( isPlaying ? ' Circles_beat--plays' : '' )}>\n          </div>))}\n      </div>\n      <div className=\"TimeSignature\">\n        <label className=\"TimeSignature__label\" htmlFor='TimeSignature__Input'>\n          <div className=\"TimeSignature__label__numerator\">{ timeSignatureNumerator }</div>\n          <hr className=\"TimeSignature__label__divider\" />\n          <div className=\"TimeSignature__label__denominator\">4</div>\n        </label>\n        <input className=\"TimeSignature__input\" id='TimeSignature__input' \n          type='range' min='2' max='20' step='1' \n          onChange={ handleTimeSignatureNumerator } value={ timeSignatureNumerator }/>\n      </div>\n      <div className=\"Bpm\">\n        <label className=\"Bpm_label\" htmlFor='Bpm_input'>{ bpm } BPM</label>\n        <input className=\"Bpm_input\" id='Bpm_input' \n        type='range' min='40' max='200' step='1' \n        onChange={ handleChangeBPM } value={ bpm } />\n      </div>\n      <button className=\"PlayButton\" onClick={ toggleButton }>\n        { !isPlaying ? <PlayFill /> : <StopFill /> }\n      </button>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}